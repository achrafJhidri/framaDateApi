package com.example.framadate.service;

import com.example.framadate.entity.Comment;
import com.example.framadate.entity.Survey;
import com.example.framadate.entity.User;
import com.example.framadate.mapper.CommentMapper;
import com.example.framadate.model.CommentDto;
import com.example.framadate.repository.CommentRepository;
import com.example.framadate.repository.SurveyRepository;
import com.example.framadate.repository.UserRepository;
import org.jetbrains.annotations.NotNull;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class CommentService {
    private final CommentRepository commentRepository;
    private final SurveyRepository surveyRepository;
    private final UserRepository userRepository;
    private final CommentMapper commentMapper;


    public CommentService(CommentRepository commentRepository, SurveyRepository surveyRepository, UserRepository userRepository, CommentMapper commentMapper) {
        this.commentRepository = commentRepository;
        this.surveyRepository = surveyRepository;
        this.userRepository = userRepository;
        this.commentMapper = commentMapper;
    }

    public List<CommentDto> findAllComments(Long id){
        Optional<Survey> survey = surveyRepository.findById(id) ;
        //TODO throw notfoundexception
        return survey.map(value -> value.getComments()
                .stream().map(commentMapper::toDto).collect(Collectors.toList())).orElse(null);
    }
    public CommentDto comment(Long surveyId, CommentDto commentDto) {
        Optional<Survey> survey = surveyRepository.findById(surveyId);
        if (survey.isEmpty()) { //Not Found in db
            return null ;//TODO throw notfoundexception
        }

        Optional<User> user = userRepository.findById(commentDto.getUserId());
        if (user.isEmpty())
            return null ;//TODO throw notfoundexception

        Comment commentEntity = newComment(commentDto, survey, user);

        return commentMapper.toDto(commentEntity);
    }
    @NotNull
    private Comment newComment(CommentDto commentDto, Optional<Survey> surveyOptional, Optional<User> user) {
        Comment commentEntity = new Comment();
        commentEntity.setComment(commentDto.getComment());
        commentEntity.setCreationDate(new Date());
        commentEntity.setLastUpdate(new Date());
        commentEntity.setSurvey(surveyOptional.get());
        commentEntity.setUser(user.get());
        return this.save(commentEntity); // the id is autogenerated here
    }

    public Comment save(Comment commentEntity) {
        return commentRepository.saveAndFlush(commentEntity);
    }

    public CommentDto updateComment(CommentDto commentDto, Long commentId) {
        Optional<Comment> comment = commentRepository.findById(commentId);
        if (comment.isEmpty()) { //Not Found in db
            return null ;//TODO throw notfoundexception
        }
        comment.get().setComment(commentDto.getComment()); // the only change that's permited to come from the client
        comment.get().setLastUpdate(new Date()); // the current date is the date of the lastUpdate

        this.save(comment.get());

        return commentMapper.toDto(comment.get());
    }

    public String deleteComment(Long commentId) {
        Optional<Comment> comment = commentRepository.findById(commentId);
        if (comment.isEmpty()) { //Not Found in db
            return null ;//TODO throw notfoundexception
        }
        commentRepository.delete(comment.get());
        return comment.get().getComment();
    }
}
